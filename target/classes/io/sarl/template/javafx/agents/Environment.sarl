/** 
 * 
 */
package io.sarl.template.javafx.agents

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.template.javafx.Controller.Controller
import io.sarl.core.Schedules
import io.sarl.template.javafx.^event.Perception
import java.util.Collections
import io.sarl.template.javafx.Model.Configuration
import io.sarl.template.javafx.^event.Influence
import io.sarl.template.javafx.^event.SetupApplication
import java.util.ArrayList


/** 
 * @author Luka Lambalot
 * 
 */
agent Environment {
	uses Logging, Lifecycle, DefaultContextInteractions, Schedules

	var controller : Controller
	var configuration : Configuration
	var listInfluences = Collections.synchronizedList(new ArrayList<Influence>)
	
	// TOBEDONE : var influences = Collections.synchronizedList(events)
	

		 
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The agent was started.")
		
		controller = Controller.getInstance
		while (controller.startAgent == false) {
			Thread::sleep(50)
			// Can be better imo
		}
		Thread::sleep(50)
		// controller.createRandomConfiguration // for testing purpose
		// controller.configuration.setupCars(5)
		var roads = controller.configuration.roads
		var cars = controller.configuration.cars
		var setupApplication = new SetupApplication()
		emit(setupApplication) // have to emit, to be sure at 100% that every agent are instanciate
		
	}
	
	on SetupApplication { 
		var cars = controller.configuration.cars
		for (car : cars) {
			spawnInContextWithID(typeof(CarAgent), car.UUID, defaultContext, car.roadOn)
		}

		startSimulationStep
		// every(500)[startSimulationStep]
	}
	
	
	
	on Influence {
//		info("i : " + occurrence.i)
//		info("id : " + occurrence.id)
//		info("next coordinate available ?  : " + occurrence.numberOfFreeCoord)
			
		var cars = controller.configuration.cars
		listInfluences.add(occurrence)
		var TexteId = ""
		for (occurence : listInfluences) {
			TexteId += occurence.id as String
			TexteId += " - "
			}
		System.out.println(TexteId)
		// when we receive an influence we need to know if everyone has done his job yet
		// tobedone
		if (cars.size() == listInfluences.size()) {
			

			// use listInfluences to update the model and the view
			// we need to know if we can move to the next coordinate
			var move = true
			for (occurence : listInfluences) {
				// println(occurence.id)
				
				if (occurrence.numberOfFreeCoord == 0) {
					move = false;
				}
				// insert code here
				if (move) {
					for (car : cars) {
						if (car.UUID == occurence.id) {
							car.getRoadOn.moveCarPosition(car)
						}	
					}		
				}
					
			}
			// then we end the current step
			endSimulationStep
		}
	
		
	}
	
	
	synchronized def startSimulationStep  {
		println("StartSimulationStep")		
		var roads = Collections.synchronizedList(controller.configuration.roads)
		var cars = controller.configuration.cars
		for (car : cars) {
			var perception = new Perception(car.roadOn)				
			emit(perception)[it.UUID == car.UUID]
		}
	}

	synchronized def endSimulationStep {
		// we clear the list after using it
		var cars = controller.configuration.cars
		for (car : cars) {
			if (car.toBeDelete.size() != 0) {
				car.toBeDelete.get(0).removeCar(car)
			}
		}

		
		listInfluences.clear()
		startSimulationStep 	// end of the loop
		
		
		
	}
	

	
	
	
	

	
}
