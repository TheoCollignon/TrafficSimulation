/** 
 * 
 */
package io.sarl.template.javafx.agents

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.template.javafx.Controller.Controller
import io.sarl.core.Schedules
import io.sarl.template.javafx.^event.Perception
import java.util.Collections
import io.sarl.template.javafx.Model.Configuration
import io.sarl.template.javafx.^event.Influence

/** 
 * @author Luka Lambalot
 * 
 */
agent Environment {
	uses Logging, Lifecycle, DefaultContextInteractions, Schedules

	var controller : Controller
	var configuration : Configuration
	// TOBEDONE : var influences = Collections.synchronizedList(events)
	

		 
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The agent was started.")
		
		controller = Controller.getInstance
		while (controller.startAgent == false) {
			Thread::sleep(50)
			// Can be better imo
		}
		Thread::sleep(50)
		// controller.createRandomConfiguration // for testing purpose
		// controller.configuration.setupCars(5)
		var roads = controller.configuration.roads
		var cars = controller.configuration.cars
		for (car : cars) {
			spawnInContextWithID(typeof(CarAgent), car.UUID, defaultContext, car.roadOn)
		}
		// every(500)[startSimulationStep]
		startSimulationStep
		
	}
	
	
	
	on Influence {
		info("i : " + occurrence.i)
		info("id : " + occurrence.id)
		info("next coordinate available ?  : " + occurrence.numberOfFreeCoord)
		// we need to know if we can move to the next coordinate
		var move = true
		if(occurrence.numberOfFreeCoord == 0) {
			move = false;
		}
		
		// when we receive an influence we need to know if everyone has done his job yet
		// tobedone
		if (true) {
			// then we end the current step
			endSimulationStep
		}
	
		
	}
	
	
	def startSimulationStep {
		var roads = Collections.synchronizedList(controller.configuration.roads)
		for (road : roads) {
			for (coord : road.coordsList) {
				for (car : coord.carList) {
					// pour chaque voiture on spawn un agent voiture
					// apres defaultcontext on met nos arg
					var perception = new Perception(road)
					emit(perception)[it.UUID == car.UUID]
				}
			}
		}
	}
	
	def endSimulationStep {
		System.out.println("salut bg")
		
	}
	

	
	
	
	

	
}
